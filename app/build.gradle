import java.nio.charset.StandardCharsets

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion(appTargetSdk)
    buildToolsVersion(appBuildTool)
    defaultConfig {
        applicationId(appPackageName)
        minSdkVersion(appMinSdk)
        targetSdkVersion(appTargetSdk)
        versionCode(buildTime().toInteger())
        versionName(appVersionName)
        ndk { abiFilters(ndkLibs) }
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true
    }
    buildTypes {
        release {
            minifyEnabled = true
            zipAlignEnabled = true
            shrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
        debug {
            jniDebuggable = true
            renderscriptDebuggable = true
            crunchPngs = false
            ext.alwaysUpdateBuildId = false
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                outputFileName = "Demo_${buildTime()}.apk"
            }
        }
    }
    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility(JavaVersion.VERSION_1_8)
        targetCompatibility(JavaVersion.VERSION_1_8)
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
        arg("objectbox.debug", true)
    }
}

dependencies {
    // official
    implementation(fileTree(dir: "libs", include: libTypes))
    coreLibraryDesugaring(libs["desugar"])
    implementation(libs["kotlin"])
    implementation(libs["core"])
    implementation(libs["appCompat"])
    implementation(libs["annotation"])
    implementation(libs["multiDex"])
    implementation(libs["fragment"])
    implementation(libs["legacySupport"])
    implementation(libs["preference"])
    implementation(libs["palette"])
    implementation(libs["constraintLayout"])
    implementation(libs["material"])
    implementation(libs["recyclerView"])
    implementation(libs["cardView"])
    implementation(libs["lifecycle"])
    implementation(libs["navigation"])

    // UI
    implementation(libs["smartRefreshLayout"])
    implementation(libs["mpChart"])
    implementation(libs["lottie"])

    // network
    implementation(libs["okHttp"])
    implementation(libs["retrofit"])
    implementation(libs["glide"])
    kapt(libs["glideKapt"])

    // database
    implementation(libs["objectBox"])
    kapt(libs["objectBoxKapt"])

    // async
    implementation(libs["eventBus"])
    kapt(libs["eventBusKapt"])
    implementation(libs["liveDataBus"])
    implementation(libs["rx"])

    // utils
    implementation(libs["fastjson"])
    implementation(libs["arouter"])
    kapt(libs["arouterKapt"])
    implementation(libs["gson"])
    implementation(libs["moshi"])
    implementation(libs["luban"])

    // analyze
    debugImplementation(libs["leakCanary"])
}

def static buildTime() {
    def date = new Date()
    return date.format("yyyyMMddHH")
}

tasks.withType(JavaCompile) {
    options.encoding = StandardCharsets.UTF_8
}
